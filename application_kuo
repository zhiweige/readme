#!/usr/bin/env python
#coding:utf-8

import os
import cv2
import CaffeNet
import exifread
import random
import caffe
import time
import struct
import time
import matplotlib.pyplot as plt  
plt.rcParams['figure.figsize'] = (10, 10)  
plt.rcParams['image.interpolation'] = 'nearest'  
plt.rcParams['image.cmap'] = 'gray'


inputFolder = '/data/zijian.xu/DATA/SQE_updated_testset/input_merged_refined_under20supplemented/'
outputFolder = '/data/zx1228.li/CODE/caffe-standalone-exp/output/'

ProjRoot = '/data/zx1228.li/CODE/caffe-standalone-exp/db/20170220/'
caffeProto_detect = ProjRoot + 'caffeProto_detect.prototxt'
caffeModel_detect = ProjRoot + 'caffeModel_detect.caffemodel'

labelMap_detect = ProjRoot + 'labelMap_detect.prototxt'

log_output_path = ProjRoot
log_level = 3

#use a config map to pass all model files
configMap = {
  'caffeProto_detect':caffeProto_detect,
  'caffeModel_detect':caffeModel_detect,
  'labelMap_detect':labelMap_detect,
  'log_output_path':log_output_path,
  'log_level':log_level,
  }

#GPU mode 
net = CaffeNet.CaffeNet(configMap, mode = 'GPU')
net.set_gpu_device(3)

labelmap = net.loadlabelmap()

#define the confidence
CONF_THRESH = 0.6

for imagePath, imageFolders, imageNames in os.walk(inputFolder):
    for imageName in imageNames:
        outputString = "Processing image " + imagePath + '/' + imageName
        print outputString
        try:
            inputs = caffe.io.load_image(imagePath + '/' + imageName)
        except:
          continue
        #
        #Run the net and examine the top_k results  
        #  
        transformed_image = net.__transformer.preprocess('data', inputs)
        # Forward pass.
        detections = net.detector(transformed_image)
        # Parse the outputs.
        det_label = detections[0,0,:,1]  
        det_conf = detections[0,0,:,2] 
        det_xmin = detections[0,0,:,3] 
        det_ymin = detections[0,0,:,4] 
        det_xmax = detections[0,0,:,5] 
        det_ymax = detections[0,0,:,6]
        
        # Get detections with confidence higher than 0.45.  
        top_indices = [i for i, conf in enumerate(det_conf) if conf >= CONF_THRESH]
        top_conf = det_conf[top_indices]
        top_label_indices = det_label[top_indices].tolist()
        top_labels = get_labelname(labelmap, top_label_indices)
        top_xmin = det_xmin[top_indices]
        top_ymin = det_ymin[top_indices]
        top_xmax = det_xmax[top_indices] 
        top_ymax = det_ymax[top_indices]

        print top_labels
        colors = plt.cm.hsv(np.linspace(0, 1, 201)).tolist()  

        plt.axis('off')
        plt.tight_layout()
        plt.imshow(inputs)  
        currentAxis = plt.gca()  
  
  
        for i in xrange(top_conf.shape[0]):  
            xmin = int(round(top_xmin[i] * inputs.shape[1]))  
            ymin = int(round(top_ymin[i] * inputs.shape[0]))  
            xmax = int(round(top_xmax[i] * inputs.shape[1]))  
            ymax = int(round(top_ymax[i] * inputs.shape[0]))  
            score = top_conf[i]
            label = int(top_label_indices[i])  
            label_name = top_labels[i]  
            display_txt = '%s: %.2f'%(label_name, score)  
            coords = (xmin, ymin), xmax-xmin+1, ymax-ymin+1  
            color = colors[label]  
            currentAxis.add_patch(plt.Rectangle(*coords, fill=False, edgecolor=color, linewidth=2))  
            currentAxis.text(xmin, ymin, display_txt, bbox={'facecolor':color, 'alpha':0.5})  

  
        #print 'outputImage path ' + outputFolder + '/' + imageName
        plt.savefig(outputFolder + '/' + imageName)
        plt.cla()
