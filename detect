import numpy as np
import os
import random
import cv2
import math
import exifread
import sys
import struct
import time
import matplotlib.pyplot as plt  
plt.rcParams['figure.figsize'] = (10, 10)  
plt.rcParams['image.interpolation'] = 'nearest'  
plt.rcParams['image.cmap'] = 'gray'

ProjRoot = '/home/zhiwei.ge/caffe-ssd/python/'
sys.path.append(ProjRoot)  
import caffe

inputFolder = '/home/zhiwei.ge/datasets/test_images_homeapp'
outputFolder = './detect_result'

#detect_initialization
channel_swap = '2,1,0'
channel_swap = [int(s) for s in channel_swap.split(',')]
mean_detect = np.array([104, 117, 123])
caffeProto_detect = './deploy.prototxt'
caffeModel_detect = './VGG_VOC_homeapp_SSD_500x500_iter_70000.caffemodel'

caffe.set_mode_gpu()
caffe.set_device(7)

net = caffe.Net(caffeProto_detect, # the structure of the model
                caffeModel_detect, # contains the trained weights
                caffe.TEST)

# input preprocessing: 'data' is the name of the input blob == net.inputs[0]
transformer = caffe.io.Transformer({'data':net.blobs['data'].data.shape})
transformer.set_transpose('data', (2,0,1))
transformer.set_mean('data', np.array([104,117,123])) # mean pixel
transformer.set_raw_scale('data', 255)  # the reference model operates on images in [0,255] range instead of [0,1]  
transformer.set_channel_swap('data', (2,1,0))  # the reference model has channels in BGR order instead of RGB  

#----------------------------------------------------------------------------------
from google.protobuf import text_format  
from caffe.proto import caffe_pb2  
labelmap_file = '/home/zhiwei.ge/caffe-ssd/data/VOC_homeapp_DET/labelmap_homeapp.prototxt'  
file = open(labelmap_file, 'r')  
labelmap = caffe_pb2.LabelMap()  
text_format.Merge(str(file.read()), labelmap)  
  
def get_labelname(labelmap, labels):  
    num_labels = len(labelmap.item)  
    labelnames = []  
    if type(labels) is not list:  
        labels = [labels]  
    for label in labels:  
        found = False  
        for i in xrange(0, num_labels):  
            if label == labelmap.item[i].label:  
                found = True  
                labelnames.append(labelmap.item[i].display_name)  
                break  
        assert found == True  
    return labelnames  

#
# set net to batch size of 1
#
image_resize = 512
net.blobs['data'].reshape(1,3,image_resize,image_resize)
#
# Load images.
#

#define the confidence
CONF_THRESH = 0.6

for imagePath, imageFolders, imageNames in os.walk(inputFolder):
    for imageName in imageNames:
        outputString = "Processing image " + imagePath + '/' + imageName
        print outputString
        try:
            inputs = caffe.io.load_image(imagePath + '/' + imageName)
        except:
            continue
    
        #
        #Run the net and examine the top_k results  
        #  
        transformed_image = transformer.preprocess('data', inputs)
        net.blobs['data'].data[...] = transformed_image
        # Forward pass.
        #print "Net.forward() " + imagePath + '/' + imageName
        detections = net.forward()['detection_out']
        # Parse the outputs.
        det_label = detections[0,0,:,1]  
        det_conf = detections[0,0,:,2] 
        det_xmin = detections[0,0,:,3] 
        det_ymin = detections[0,0,:,4] 
        det_xmax = detections[0,0,:,5] 
        det_ymax = detections[0,0,:,6]
        
        # Get detections with confidence higher than 0.45.  
        top_indices = [i for i, conf in enumerate(det_conf) if conf >= CONF_THRESH]
        top_conf = det_conf[top_indices]
        top_label_indices = det_label[top_indices].tolist()
        top_labels = get_labelname(labelmap, top_label_indices)
        top_xmin = det_xmin[top_indices]
        top_ymin = det_ymin[top_indices]
        top_xmax = det_xmax[top_indices] 
        top_ymax = det_ymax[top_indices]

        print top_labels
        colors = plt.cm.hsv(np.linspace(0, 1, 201)).tolist()  

        plt.axis('off')
        plt.tight_layout()
        plt.imshow(inputs)  
        currentAxis = plt.gca()  
  
  
        for i in xrange(top_conf.shape[0]):  
            xmin = int(round(top_xmin[i] * inputs.shape[1]))  
            ymin = int(round(top_ymin[i] * inputs.shape[0]))  
            xmax = int(round(top_xmax[i] * inputs.shape[1]))  
            ymax = int(round(top_ymax[i] * inputs.shape[0]))  
            score = top_conf[i]
            label = int(top_label_indices[i])  
            label_name = top_labels[i]  
            display_txt = '%s: %.2f'%(label_name, score)  
            coords = (xmin, ymin), xmax-xmin+1, ymax-ymin+1  
            color = colors[label]  
            currentAxis.add_patch(plt.Rectangle(*coords, fill=False, edgecolor=color, linewidth=2))  
            currentAxis.text(xmin, ymin, display_txt, bbox={'facecolor':color, 'alpha':0.5})  

  
        #print 'outputImage path ' + outputFolder + '/' + imageName
        plt.savefig(outputFolder + '/' + imageName)
        plt.cla()

