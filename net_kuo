#!/usr/bin/env python
#coding:utf-8
import sys
import numpy as np
import skimage
import os
import struct
import cv2
import math
ProjRoot = '/home/zhiwei.ge/datasets/caffe-ssd-py'
sys.path.append(ProjRoot)
import caffe

from google.protobuf import text_format  
from caffe.proto import caffe_pb2

class CaffeNet:
    image_resize = 512
    def __init__(self, configMap, mode = 'CPU'):
        print 'Initialization start.'
        caffe.init_log_info(configMap['log_level'], configMap['log_output_path'])
        #detect_initialization
        channel_swap = '2,1,0'
        channel_swap = [int(s) for s in channel_swap.split(',')]
        self.__mean_detect = np.array([104, 117, 123])

        caffeProto_detect = configMap['caffeProto_detect']
        caffeModel_detect = configMap['caffeModel_detect']

        self.__net = caffe.Net(caffeProto_detect, # the structure of the model
                        caffeModel_detect, # contains the trained weights
                        caffe.TEST)
                        
        # input preprocessing: 'data' is the name of the input blob == net.inputs[0]
        self.__transformer = caffe.io.Transformer({'data':self.__net.blobs['data'].data.shape})
        self.__transformer.set_transpose('data', (2,0,1))
        self.__transformer.set_mean('data', np.array([104,117,123])) # mean pixel
        self.__transformer.set_raw_scale('data', 255)  # the reference model operates on images in [0,255] range instead of [0,1]  
        self.__transformer.set_channel_swap('data', (2,1,0)) # the reference model has channels in BGR order instead of RGB 

        if mode == 'CPU':
            caffe.set_mode_cpu()
        elif mode == 'GPU':
            caffe.set_mode_gpu()
        else:
            raise Exception("Must assigned mode as 'CPU' or 'GPU'.")

        self.__mode = mode

        print "Finish loading model."

def load_labelmap(self):
    labelmap_file = configMap['labelMap_detect']  
    file = open(labelmap_file, 'r')
    labelmap = caffe_pb2.LabelMap()  
    text_format.Merge(str(file.read()), labelmap)
    return labelmap

def set_gpu_device(self, index):
    if self.__mode == 'CPU':
        raise Exception("'CPU' does not support such function.")
    caffe.set_device(index)

def detector(self, image):
    #
    #Run the net and examine the top_k results  
    #
    selg.__net.blobs['data'].reshape(1,3,image_resize,image_resize)
    self.__net.blobs['data'].data[...] = image
    # Forward pass.
    detections = self.__net.forward()['detection_out']
    
    return detections
